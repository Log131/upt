from aiogram import Dispatcher,Bot,executor,types

from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram.dispatcher import FSMContext
from keyboards import *
import datetime
import asyncio
from datas import *



token = '6021836757:AAFu1PVkjrjcG1R4sfQTBv79A8pYQQb-08Q'

bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


@dp.message_handler(commands=['start'])

async def startx(msg: types.Message):
    
    if msg.from_user.username is None:
        await msg.answer(' ``` –î–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∏–∫–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ``` ', parse_mode='Markdown')
    
    else:
        await state_5(userid=msg.from_user.id,username=msg.from_user.username,first_name=msg.from_user.first_name)
        await msg.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=wel())
                
            

@dp.message_handler(text='üóÇ –ù–∞–±–æ—Ä—ã')
async def nabors(msg: types.Message):
    async with aiosqlite.connect('teg.db') as tc:
        async with tc.execute('SELECT time_delete FROM users WHERE user_id = ?', (msg.from_user.id,)) as f:
            s = await f.fetchone()
        try:
            if s[0] == '0' or s[0] is None:

                await msg.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏!')

            else:
                
                await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –î–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–±–æ—Ä–∞–º–∏!', reply_markup=casses())
        
        except:
            pass

class cases(StatesGroup):

    cases_ = State()
    price = State()
    zametka = State()
    usersc = State()

class adminadd(StatesGroup):
    add_xdx = State()
    
    timex_ = State()

class get_spam(StatesGroup):
    spam_start = State()
class del_admins(StatesGroup):
    del_ads = State()

class searches_(StatesGroup):
    search_start = State()


@dp.message_handler(text='–û—Ç–∫—Ä—ã—Ç—å –ù–∞–±–æ—Ä', state=None,)
async def statex(msg: types.Message, state: FSMContext):
    async with aiosqlite.connect('teg.db') as tc:
        async with tc.execute('SELECT time_delete FROM users WHERE user_id = ?', (msg.from_user.id,)) as f:
            s = await f.fetchone()
    try:
        if s[0] == '0' or s[0] is None:
            await msg.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏')
        else:
            await cases.cases_.set()
        
            await msg.answer('–î–ª—è –û—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–±–æ—Ä–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n 1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø', reply_markup=casses_())
    except:
        await state.finish()
        
        
    



@dp.message_handler(state=cases.cases_)
async def state_(msg: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['cases_'] = msg.text

        await cases.next()
    
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∑–∞ –æ—Ç–∑—ã–≤')
    except:
        await state.finish()



@dp.message_handler(state=cases.price)
async def state__(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['price'] = msg.text
            await cases.next()

            await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–∞–±–æ—Ä–∞. –û–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∞–±–æ—Ä—É')
    
        
        except:
            await state.finish()
            await msg.answer('–Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')

    
@dp.message_handler(state=cases.zametka)
async def stated(msg: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            
            data['zametka'] = msg.text
    
    
    
    
    
        await msg.answer('–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –Ω—É–∂–Ω–æ')
        await cases.next()
    except:

        await state.finish()
        await msg.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ')
    
   
@dp.message_handler(state=cases.usersc)
async def state_(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    data['usersc'] = msg.text
    try:
        async with aiosqlite.connect('teg.db') as tc:
            await tc.execute('UPDATE users SET cases_ = ?, price = ?, zametka = ?, usersc = ?  WHERE user_id = ?', (data['cases_'],data['price'],data['zametka'],data['usersc'], msg.from_user.id,))
            await tc.commit()
        
            
            await msg.answer('–ì–æ—Ç–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ –º–æ–∏ –Ω–∞–±–æ—Ä—ã', reply_markup=casses())
            
            await state.finish()
    except:
        await state.finish()
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    
    


@dp.message_handler(text='–ú–æ–∏ –ù–∞–±–æ—Ä—ã')
async def check_cases(msg: types.Message):




    
    async with aiosqlite.connect('teg.db') as tc:
        async with tc.execute('SELECT * FROM users WHERE user_id = ?',(msg.from_user.id,)) as f:
            datas = await f.fetchone()
        async with tc.execute('SELECT time_delete FROM users WHERE user_id = ?', (msg.from_user.id,)) as f_:
            s = await f_.fetchone()
    if s[0] == '0' or s[0] is None:
        await msg.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏')
    else:
        if datas[0] == '0':
            await msg.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∞–±–æ—Ä–æ–≤ —á—Ç–æ –±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä –Ω–∞–∂–º–∏—Çe –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä', reply_markup=casses())
        else:
            await msg.answer(f' üìà  {datas[1]}\n üë©‚Äçüîß –ù—É–∂–Ω–æ –ª—é–¥–µ–π - {datas[4]} \n üí¥ –û–ø–ª–∞—Ç–∞ - {datas[2]} \n üè∑ –û–ø–∏—Å–∞–Ω–∏–µ : {datas[3]} \n ‚úâÔ∏è –ü–∏—Å–∞—Ç—å - @{msg.from_user.username}', reply_markup=sendx())


@dp.message_handler(text='–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é')

async def swelx_(msg: types.Message):
        await msg.answer('üéâ', reply_markup=wel())
        await msg.delete()




@dp.message_handler(text='üÜî –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(msg: types.Message):
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT * FROM users WHERE user_id = ?',(msg.from_user.id,)) as f_:
                x = await f_.fetchone()
        try:
            tie = datetime.datetime.strptime(x[7], '%Y-%m-%d %H:%M')
            tir = datetime.datetime.strptime(x[8], '%Y-%m-%d %H:%M')
            s = tir - datetime.datetime.now()
            f = s.days
            await msg.answer(f' –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ \n üÜî : {x[0]} \n ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ \n üï∞ –†–µ—Ü–∏—Å—Ç—Ä–∞—Ü–∏—è –ê–¥–º–∏–Ω–∫–∏: {x[7]} \n ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ \n ‚ùóÔ∏è –î–æ –∫–æ–Ω—Ü–∞ –ê–¥–º–∏–Ω–∫–∏ : ` {abs(f)} –î–Ω–µ–π ` ', parse_mode='Markdown')
        except Exception as e:
            print(e)
            await msg.answer(f' –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ \n üÜî : {x[0]} \n ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ \n –ê–¥–º–∏–Ω–∫–∞ : ` –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ ` ', parse_mode='Markdown')






@dp.callback_query_handler(text_contains='starts')
async def sendx_(css: types.CallbackQuery):
    try:
        row = InlineKeyboardMarkup()
        rows = InlineKeyboardButton(text='üìù –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', url=f'https://t.me/{css.from_user.username}') 
        if css.data == 'starts_':
            async with aiosqlite.connect('teg.db') as tc:
                async with tc.execute('SELECT * FROM users WHERE user_id = ?',(css.from_user.id,)) as f:
                    datas = await f.fetchone()
            row.add(rows)
            if datas[8] == '0' or datas[8] == None  or datas[8] is None:
            
                await css.message.delete()
            else:
                s = await bot.send_message(chat_id=-1001791109996, text=f' * üìà {datas[1]}\n üë©‚Äçüîß –ù—É–∂–Ω–æ –ª—é–¥–µ–π - {datas[4]} \n üí¥ –û–ø–ª–∞—Ç–∞ - {datas[2]} \n üè∑ –û–ø–∏—Å–∞–Ω–∏–µ : {datas[3]} \n ‚úâÔ∏è –ü–∏—Å–∞—Ç—å - @{css.from_user.username}*', parse_mode='Markdown', reply_markup=row)
            
            #s_ = await bot.send_message(chat_id='@fludilkaotzivnichka', text=f' üìà {datas[1]}\n üë©‚Äçüîß –ù—É–∂–Ω–æ –ª—é–¥–µ–π - {datas[4]} \n üí¥ –û–ø–ª–∞—Ç–∞ - {datas[2]} \n üè∑ –û–ø–∏—Å–∞–Ω–∏–µ : {datas[3]} \n ‚úâÔ∏è –ü–∏—Å–∞—Ç—å - @{css.from_user.username}')
            



            async with aiosqlite.connect('teg.db') as tc:
                await tc.execute('UPDATE iff SET sends = ? WHERE user_id = ?', (s.message_id, css.from_user.id,))
                await tc.commit()
            await css.answer('–í–∞—à –Ω–∞–±–æ—Ä –æ—Ç–∫—Ä—ã–ª—Å—è ‚òëÔ∏è', show_alert=True)
        elif css.data == 'starts%':
            async with aiosqlite.connect('teg.db') as tc:
                async with tc.execute('SELECT * FROM iff WHERE user_id = ?', (css.from_user.id,)) as f_:
                    sends = await f_.fetchall()
            for i in sends:
                await bot.edit_message_text(text=f'üîí –ù–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç, –æ–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è ‚ùóÔ∏è',chat_id=-1001791109996, message_id=i[1])
                #await bot.delete_message(chat_id='@fludilkaotzivnichka', message_id=i[2])
            async with aiosqlite.connect('teg.db') as tc:
                await tc.execute('UPDATE users SET cases_ = ?, price = ?, zametka = ?, usersc = ? WHERE user_id = ?',(None, None, None, None, css.from_user.id,))
                await tc.commit()
            await css.answer('–£–¥–∞–ª–µ–Ω–æ')
                #await bot.send_message(chat_id=-1001791109996, text=f'üîí –ù–∞–±–æ—Ä –æ—Ç @{css.from_user.username} –ë—ã–ª –∑–∞–∫—Ä—ã—Ç!')
        elif css.data == 'starts-':
            await bot.send_message(css.from_user.id, text='–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup=wel())
    except Exception as e:
        print(e)
        pass




@dp.message_handler(text='üóÑ –î–Ω–µ–≤–Ω–∏–∫/–ê—Ä—Ö–∏–≤')
async def sends___(msg: types.Message):
    async with aiosqlite.connect('teg.db') as tc:
        async with tc.execute('SELECT time_delete FROM users WHERE user_id =?', (msg.from_user.id,)) as f:
            s = await f.fetchone()
    if s[0] == '0' or s[0] is None:
        await msg.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏')
    else:
        await msg.answer('–¢—É—Ç –ú–∞–Ω—É–∞–ª—ã :',reply_markup=archives())


@dp.message_handler(text='üìû –°–≤—è–∑—å —Å –ì–ª.–ê–¥–º–∏–Ω–æ–º')
async def sends_____(msg: types.Message):
    await msg.answer('üìû - @kaif_work')





@dp.message_handler(commands=['admin'])
async def ads_(msg: types.Message):
   
    chat_admins = await bot.get_chat_member(chat_id='@OwnerOtziv', user_id=msg.from_user.id)
    if chat_admins.status == 'creator' or chat_admins.status == 'administrator':
        await msg.answer('–í—ã –∞–¥–º–∏–Ω –ö–æ–º–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ - /del –æ–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π - /war –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', reply_markup=ads_55())
    
    
    
    
    
    else:
        await msg.answer('–û—Ç–∫–∞–∑–∞–Ω–æ')




      
@dp.message_handler(text='–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É', state=None)
async def search_(msg: types.Message, state: FSMContext):
    try:
        row = ReplyKeyboardMarkup(resize_keyboard=True)
        s = KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        row.add(s)
        chat_admins = await bot.get_chat_member(chat_id='@OwnerOtziv', user_id=msg.from_user.id)
        if chat_admins.status == 'creator' or chat_admins.status == 'administrator':
            await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @', reply_markup=row)
            await searches_.search_start.set()
    except Exception as e:
        pass

@dp.message_handler(state=searches_.search_start)
async def state_search(msg: types.Message, state: FSMContext):
    try:
        row = InlineKeyboardMarkup()
        if msg.text == '–û—Ç–º–µ–Ω–∞':
            await msg.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=ads_55())
            await state.finish()
        else:
            async with aiosqlite.connect('teg.db') as tc:
                async with tc.execute('SELECT username FROM users WHERE username = ?', (msg.text,)) as t:
                    x = await t.fetchone()
                async with tc.execute('SELECT * from users WHERE username = ?', (x[0],)) as t_:
                    s = await t_.fetchone()
            rows = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data=f'admins_{s[0]}')
            rows_ = InlineKeyboardButton(text='—É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–æ–≤', callback_data=f'remove_{s[0]}')
            row.add(rows, rows_)
            await msg.answer(f'ID : {s[0]}\n nickname : @{s[5]} \n firstname: {s[6]} \n –í—Ä–µ–º—è : {s[7]} \n –û—Å—Ç–∞–ª–æ—Å—å: {s[8]}', reply_markup=row)
            await msg.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=ads_55())
            await state.finish()
    except Exception as e:
        await msg.answer('–¢–∞–∫–æ–≥–æ –Ω–µ—Ç')
        await state.finish()
        print(e)




@dp.message_handler(text='–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤')
async def admins_(msg: types.Message):
    try:
        row = InlineKeyboardMarkup()
        chat_admins = await bot.get_chat_member(chat_id='@OwnerOtziv', user_id=msg.from_user.id)
        if chat_admins.status == 'creator' or chat_admins.status == 'administrator':
            async with aiosqlite.connect('teg.db') as tc:
                async with tc.execute('SELECT * FROM users') as t:
                    x = await t.fetchall()
            for s in x:
                rows = InlineKeyboardButton(text=f'@{s[5]} - {s[8]}', callback_data=f'add_@{s[0]}')
                    
                    
                row.add(rows)
            await msg.answer('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', reply_markup=row)
        else:
            pass
    except:
        pass




@dp.callback_query_handler(text_contains='trr')
async def state_r_0(css: types.CallbackQuery):
    s = css.data.split('_')
    await css.answer()
    await css.message.delete()
    try:
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT time_delete FROM users WHERE user_id = ?', (int(s[1]),)) as f:
                s_ = await f.fetchone()
                time_now = (datetime.datetime.strptime(s_[0], '%Y-%m-%d %H:%M') - datetime.timedelta(days=1)).strftime('%Y-%m-%d %H:%M')
        async with aiosqlite.connect('teg.db') as tc:
            await tc.execute('UPDATE users SET time_delete = ? WHERE user_id = ?', (time_now, int(s[1])))
            await tc.commit()
        await css.message.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    except Exception as e:
        print(e)
        await css.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')




@dp.callback_query_handler(text_contains='srr')
async def state_s_0(css: types.CallbackQuery):
    s = css.data.split('_')
    await css.answer()
    await css.message.delete()
    try:
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT time_delete FROM users WHERE user_id = ?', (int(s[1]),)) as f:
                s_ = await f.fetchone()
                time_now = (datetime.datetime.strptime(s_[0], '%Y-%m-%d %H:%M') + datetime.timedelta(days=1)).strftime('%Y-%m-%d %H:%M')
        async with aiosqlite.connect('teg.db') as tc:
            await tc.execute('UPDATE users SET time_delete = ? WHERE user_id = ?', (time_now, int(s[1]),))
            await tc.commit()
        await css.message.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    except Exception as e:
        print(e)
        await css.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')



@dp.message_handler(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', state=None)
async def spam_strsx(msg: types.Message, state: FSMContext):

    chat_admins = await bot.get_chat_member(chat_id='@OwnerOtziv', user_id=msg.from_user.id)
    if chat_admins.status == 'creator' or chat_admins.status == 'administrator':
        x = ReplyKeyboardMarkup(resize_keyboard=True)
        x_0 = KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        x.add(x_0)
        await msg.answer('–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=x)
        await get_spam.spam_start.set()



@dp.message_handler(state=get_spam.spam_start)
async def stam_it(msg: types.Message, state: FSMContext):
    try:
        if msg.text == '–û—Ç–º–µ–Ω–∞':
            await msg.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=ads_55())
            await state.finish()
        else:
            async with aiosqlite.connect('teg.db') as tc:
                async with tc.execute('SELECT user_id FROM users') as t:
                    s = await t.fetchall()
            for sends in s:
                try:
                    await bot.send_message(chat_id=sends[0], text=msg.text)
                except Exception as e:
                    print(e)
            await msg.answer('–†–∞—Å—Å—ã–ª–µ–Ω–æ', reply_markup=ads_55())
            await state.finish()
    except Exception as e:
        print(e)



@dp.callback_query_handler(text_contains='add_@')
async def add_ads_(css: types.CallbackQuery):

    
    rowsr = InlineKeyboardMarkup()
    rows_s = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='otmena')
    try: 
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT * FROM users WHERE user_id = ?', (int(css.data[5:]),)) as t:
                v = await t.fetchall()
        for s in v:
            rows_0 = InlineKeyboardButton(text='- –î–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏', callback_data=f'trr_{s[0]}')
            rows_5 = InlineKeyboardButton(text='+ –î–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏', callback_data=f'srr_{s[0]}')
            rows = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—ã', callback_data=f'admins_{s[0]}')
            rows_ = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–æ–≤', callback_data=f'remove_{s[0]}')
            rowsr.add(rows,rows_).add(rows_s).add(rows_0,rows_5)
            await css.message.answer(f'ID : {s[0]}\n nickname : @{s[5]} \n firstname: {s[6]} \n –í—Ä–µ–º—è : {s[7]} \n –û—Å—Ç–∞–ª–æ—Å—å: {s[8]}', reply_markup=rowsr)
    
    
    
    
    except:
        pass









@dp.callback_query_handler(text='otmena')
async def adsadsa(css: types.CallbackQuery):
    
    await css.message.delete()





@dp.callback_query_handler(text_contains='admins_', state=None)
async def state_ads_(css: types.CallbackQuery, state: FSMContext):
    
    try:
        async with state.proxy() as data:
            data['add_xdx'] = int(css.data[7:])
    
    
    
    
        s = InlineKeyboardMarkup()
        s_ = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='stop')
        s.add(s_)
        await css.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∫–∏ (–î–Ω–∏)', reply_markup=s) 


    
        await adminadd.add_xdx.set()
    except:

        await css.message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞')







@dp.message_handler(state=adminadd.add_xdx)
async def state_ads______(msg: types.Message, state: FSMContext):
    
    
    
    try:
        time_now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')

        time_delete = (datetime.datetime.now() + datetime.timedelta(days=int(msg.text))).strftime('%Y-%m-%d %H:%M')
        
        async with state.proxy() as data:
            async with aiosqlite.connect('teg.db') as tc:
                async with tc.execute('SELECT * FROM users WHERE user_id = ?', (data['add_xdx'],)) as t:
                    s = await t.fetchall()
            for i in s:
                async with aiosqlite.connect('teg.db') as tc:
                    await tc.execute('UPDATE rat SET username = ?, username_admin = ?, time_now = ?, time_delete = ? WHERE user_id = ?', (i[5], msg.from_user.username,time_now, time_delete, data['add_xdx'],))
                    
                    await tc.execute('UPDATE users SET time_now = ?, time_delete = ? WHERE user_id = ?', (time_now, time_delete, data['add_xdx'],))
                    
                    await tc.commit()
                
                await msg.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ!')
                await state.finish()
            async with aiosqlite.connect('teg.db') as tc:
                async with tc.execute('SELECT username FROM users WHERE user_id = ?', (data['add_xdx'],)) as t:
                    srs = await t.fetchone()
            await bot.send_message(chat_id=6203509782, text=f'@{msg.from_user.username} –î–æ–±–∞–≤–∏–ª - @{srs[0]} –ù–∞ {msg.text} –î–Ω–µ–π')
            await bot.send_photo(chat_id=data['add_xdx'], photo='https://i.yapx.ru/V8QOQ.png', caption='–í–∞–º –≤—ã–¥–∞–ª–∏ –∞–¥–º–∏–Ω–∫—É üî•üî•üî•')
    
    except Exception as e:
        print(e)
        await state.finish()
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')



@dp.callback_query_handler(state=adminadd.add_xdx)
async def state_adsrs(css: types.CallbackQuery, state: FSMContext):
    if css.data == 'stop':
        await state.finish()
        await css.message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=ads_55())




@dp.callback_query_handler(text_contains='remove_')
async def remove_it(css: types.CallbackQuery):
    s = css.data.split('_')
    print(s)
    try:
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT username FROM users WHERE user_id = ? ', (int(s[1]),)) as t:
                srs = await t.fetchone()
        await bot.send_message(chat_id=6203509782, text=f'@{css.from_user.username} –£–¥–∞–ª–∏–ª @{srs[0]} –ò–∑ –∞–¥–º–∏–Ω–æ–≤')
        async with aiosqlite.connect('teg.db') as tc:
                await tc.execute('DELETE FROM users WHERE user_id = ?', (int(s[1]),))
                await tc.commit()
        try:
            await bot.send_message(chat_id=int(s[1]), text='–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å /start –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
        except Exception as e:
            print(e)
    

        await css.message.answer('–£–¥–∞–ª–µ–Ω')
        
    except Exception as e:
        print(e)
        await css.message.answer('–ß—Ç–æ—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')







@dp.message_handler(commands=['rat'])
async def rat_(msg: types.Message):

    try:
        chat_member = await bot.get_chat_member(chat_id='@OwnerOtziv', user_id=msg.from_user.id)
        if chat_member.status == 'creator':
            async with aiosqlite.connect('teg.db') as tc:
                async with tc.execute('SELECT * FROM rat') as t:
                    s = await t.fetchall()
            for i in s:
                time_ = datetime.datetime.strptime(i[4], '%Y-%m-%d %H:%M')
                f = time_ - datetime.datetime.now()
                fffff = f.days
                await msg.answer(f'–ê–¥–º–∏–Ω - @{i[2]} –¥–æ–±–∞–≤–∏–ª - @{i[1]} \n –î–æ–±–∞–≤–∏–ª –≤ - {i[3]} \n –í—ã–¥–∞–ª –Ω–∞ - {abs(fffff) + 1} –¥–Ω–µ–π')
        else:
            await msg.answer('–û—Ç–∫–∞–∑–∞–Ω–æ')

    except Exception as e:
        print(e)









if __name__ == '__main__':
    s = asyncio.get_event_loop()
    s.run_until_complete(state_tttttt())
   
    executor.start_polling(dp, skip_updates=True)
